{
	"name": "DataWrangling",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8b9fad02-fbe2-4ccb-bf9c-bcc9d968be04"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2212407c-bd81-4f64-91df-1e7f04c45fdf/resourceGroups/Synapse-Delta-Experiments/providers/Microsoft.Synapse/workspaces/synapseajithrdelta/bigDataPools/sparkpool3",
				"name": "sparkpool3",
				"type": "Spark",
				"endpoint": "https://synapseajithrdelta.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"SELECT COUNT(*) from ratings"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"SELECT movieid,count(*) from ratings group by 1 order by 2 DESC"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"SELECT userid,rating,avg(rating) FROM ratings WHERE rating > '3.0' GROUP BY userid,rating"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DESC TABLE default.metadata"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"from pyspark.sql.functions import from_json, col\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\r\n",
					"from pyspark.sql import functions as F\r\n",
					"\r\n",
					"# Show all movies produced by a production company that has rating > 3.0\r\n",
					"\r\n",
					"prod_companies = spark.sql(\"SELECT * FROM metadata\")\r\n",
					"prod_companies.printSchema\r\n",
					"#display(prod_companies)\r\n",
					"\r\n",
					"#prod_companies.withColumn(\"production_companies\", F.explode(\"production_companies\")).show()\r\n",
					" #   .select(col('id'), col('title'), col('production_companies.*'))\\\r\n",
					"  #  .show()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# Show all movies produced by a production company that has rating > 3.0\r\n",
					"\r\n",
					"prod_companies = spark.sql(\"SELECT id, title, production_companies FROM metadata\")\r\n",
					"\r\n",
					"from pyspark.sql.functions import from_json, col\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"\r\n",
					"schema = StructType(\r\n",
					"    [\r\n",
					"        StructField('name', StringType(), True),\r\n",
					"        StructField('id', IntType(), True)\r\n",
					"    ]\r\n",
					")\r\n",
					"\r\n",
					"prod_companies.withColumn(\"production_companies\", from_json(\"production_companies\", schema))\\\r\n",
					"    .select(col('id'), col('title'), col('production_companies.*'))\\\r\n",
					"    .show()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"query = \"\"\"\r\n",
					"SELECT a.id, a.title, a.production_companies, b.rating FROM\r\n",
					"\r\n",
					"() a\r\n",
					"\r\n",
					"JOIN\r\n",
					"\r\n",
					"(SELECT sourceid, destinationid\r\n",
					"FROM actions_table\r\n",
					"WHERE date='2013-05-15' AND payloadtype='lists_user' AND actiontype='delete') b\r\n",
					"\r\n",
					"ON a.userid = b.sourceid\r\n",
					"ON a.listid = b.destinationid;\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"df = sql(\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"spark.sql(\"SELECT * from metadata limit 100\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}
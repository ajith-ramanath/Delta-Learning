{
	"name": "CreateTables",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9cab6387-5ba7-42ca-905b-53d80a42fb14"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2212407c-bd81-4f64-91df-1e7f04c45fdf/resourceGroups/delta-swat/providers/Microsoft.Synapse/workspaces/ajithrdeltalearning/bigDataPools/sparkpool3",
				"name": "sparkpool3",
				"type": "Spark",
				"endpoint": "https://ajithrdeltalearning.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import from_json, col\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType\r\n",
					"\r\n",
					"# Definitions\r\n",
					"# Define the output formats and paths and the table name.\r\n",
					"write_format = 'delta'\r\n",
					"\r\n",
					"# Load and save paths\r\n",
					"load_path = 'abfss://datasets@ajithrdestinationadls.dfs.core.windows.net/drugs/'\r\n",
					"save_path = 'abfss://datasets@ajithrdestinationadls.dfs.core.windows.net/drugs-delta/'\r\n",
					"\r\n",
					"# Tables names\r\n",
					"drugs_table = \"drugs\"\r\n",
					"details_table = \"details\"\r\n",
					"geography_table = \"geography\"\r\n",
					"speciality_table = \"speciality\"\r\n",
					"providers_table = \"providers\"\r\n",
					"states_table = \"states\"\r\n",
					"\r\n",
					"# Check if the path exists, clean up if so.\r\n",
					"# if ():\r\n",
					"    #mssparkutils.fs.rm(save_path, True)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + drugs_table)\r\n",
					"drugs_df = spark.read.parquet(load_path + \"/drugs.parquet\")\r\n",
					"drugs_df.printSchema()\r\n",
					"# Write the data to its target.\r\n",
					"drugs_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/drugs/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + drugs_table + \" USING DELTA LOCATION '\" + save_path + \"/drugs/'\")\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + details_table)\r\n",
					"details_df = spark.read.parquet(load_path + \"/details.parquet\")\r\n",
					"details_df.printSchema()\r\n",
					"# Write the data to its target.\r\n",
					"details_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/details/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + details_table + \" USING DELTA LOCATION '\" + save_path + \"/details/'\")\r\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + geography_table)\r\n",
					"geography_df = spark.read.parquet(load_path + \"/geography.parquet\")\r\n",
					"geography_df.printSchema()\r\n",
					"# Write the data to its target.\r\n",
					"geography_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/geography/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + geography_table + \" USING DELTA LOCATION '\" + save_path + \"/geography/'\")\r\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + speciality_table)\r\n",
					"speciality_df = spark.read.parquet(load_path + \"/speciality.parquet\")\r\n",
					"speciality_df.printSchema()\r\n",
					"# Write the data to its target.\r\n",
					"speciality_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/speciality/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + speciality_table + \" USING DELTA LOCATION '\" + save_path + \"/speciality/'\")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + providers_table)\r\n",
					"providers_df = spark.read.parquet(load_path + \"/providers.parquet\")\r\n",
					"providers_df.printSchema()\r\n",
					"# Write the data to its target.\r\n",
					"providers_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/providers/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + providers_table + \" USING DELTA LOCATION '\" + save_path + \"/providers/'\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + states_table)\r\n",
					"states_df = spark.read.parquet(load_path + \"/states.parquet\")\r\n",
					"states_df.printSchema()\r\n",
					"# Write the data to its target.\r\n",
					"states_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/states/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + states_table + \" USING DELTA LOCATION '\" + save_path + \"/states/'\")"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}
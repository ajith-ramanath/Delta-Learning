{
	"name": "CreateTables",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8e6cecff-3a18-4815-abd3-eea9e5e8c4ef"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2212407c-bd81-4f64-91df-1e7f04c45fdf/resourceGroups/delta-swat/providers/Microsoft.Synapse/workspaces/ajithrdeltalearning/bigDataPools/sparkpool3",
				"name": "sparkpool3",
				"type": "Spark",
				"endpoint": "https://ajithrdeltalearning.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Definitions\r\n",
					"# Define the output formats and paths and the table name.\r\n",
					"write_format = 'delta'\r\n",
					"\r\n",
					"# Load and save paths\r\n",
					"load_path = 'abfss://datasets@ajithrdestinationadls.dfs.core.windows.net/movies'\r\n",
					"save_path = 'abfss://datasets@ajithrdestinationadls.dfs.core.windows.net/movies-delta-parquet-1'\r\n",
					"\r\n",
					"# Tables names\r\n",
					"ratings_table = \"ratings\"\r\n",
					"credits_table = \"credits\"\r\n",
					"keywords_table = \"keywords\"\r\n",
					"links_table = \"links\"\r\n",
					"metadata_table = \"metadata\""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + ratings_table)\r\n",
					"\r\n",
					"# Load the data from its source.\r\n",
					"ratings_df = spark.read.csv(load_path + \"/ratings.csv\", header='true', inferSchema='true')\r\n",
					"\r\n",
					"# Write the data to its target.\r\n",
					"ratings_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/ratings/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + ratings_table + \" USING DELTA LOCATION '\" + save_path + \"/ratings/'\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + credits_table)\r\n",
					"\r\n",
					"# Load the data from its source.\r\n",
					"credits_df = spark.read.csv(load_path + \"/credits.csv\", header='true', inferSchema='true')\r\n",
					"\r\n",
					"# Write the data to its target.\r\n",
					"credits_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/credits/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + credits_table + \" USING DELTA LOCATION '\" + save_path + \"/credits/'\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + keywords_table)\r\n",
					"\r\n",
					"# Load the data from its source.\r\n",
					"keywords_df = spark.read.csv(load_path + \"/keywords.csv\", header='true', inferSchema='true')\r\n",
					"\r\n",
					"# Write the data to its target.\r\n",
					"keywords_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/keywords/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + keywords_table + \" USING DELTA LOCATION '\" + save_path + \"/keywords/'\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + links_table)\r\n",
					"\r\n",
					"# Load the data from its source.\r\n",
					"links_df = spark.read.csv(load_path + \"/links.csv\", header='true', inferSchema='true')\r\n",
					"\r\n",
					"# Write the data to its target.\r\n",
					"links_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/links/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + links_table + \" USING DELTA LOCATION '\" + save_path + \"/links/'\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS \" + metadata_table)\r\n",
					"\r\n",
					"# Load the data from its source.\r\n",
					"metadata_df = spark.read.csv(load_path + \"/movies_metadata.csv\", header='true', inferSchema='true')\r\n",
					"\r\n",
					"# Write the data to its target.\r\n",
					"metadata_df.write \\\r\n",
					"  .format(write_format) \\\r\n",
					"  .save(save_path + \"/metadata/\")\r\n",
					"\r\n",
					"# Create the table.\r\n",
					"spark.sql(\"CREATE TABLE \" + metadata_table + \" USING DELTA LOCATION '\" + save_path + \"/metadata/'\")"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}
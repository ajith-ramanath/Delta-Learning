{
	"name": "ConcurrentReads",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "97cc61f2-2f5a-4b8b-8e9b-fe2cd39fdac2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2212407c-bd81-4f64-91df-1e7f04c45fdf/resourceGroups/delta-swat/providers/Microsoft.Synapse/workspaces/ajithrdeltalearning/bigDataPools/sparkpool3",
				"name": "sparkpool3",
				"type": "Spark",
				"endpoint": "https://ajithrdeltalearning.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"val ratings = sql(\"select userId, movieId, rating from ratings\")\r\n",
					"ratings.describe().show\r\n",
					"ratings.printSchema"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.functions.count\r\n",
					"import org.apache.spark.sql.functions.{desc,asc} \r\n",
					"\r\n",
					"display(ratings.groupBy(\"userId\").agg(count(\"*\").alias(\"number_cnt\")).orderBy(desc(\"number_cnt\")))\r\n",
					"\r\n",
					"display(ratings.groupBy(\"userId\").agg(count(\"*\").alias(\"number_cnt\")).orderBy(asc(\"number_cnt\")))"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(sql(\"select userId, count(*) from ratings group by userId order by count(*) desc\"))\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"ratings.groupBy(\"userId\").agg(count(\"*\").alias(\"number_cnt\")).withColumn(\"years_Watching\", round($\"number_cnt\" * 100/ 60 / 24 / 365,3)).orderBy(desc(\"years_Watching\")).show(10)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import org.apache.spark.sql.functions.{asc, desc}\r\n",
					"\r\n",
					"def movie_query (df: org.apache.spark.sql.DataFrame, stars: Seq[Double], user: Int) : Unit = {\r\n",
					"    if (stars.isEmpty) {\r\n",
					"        println(s\"All movies rated by user $user\")\r\n",
					"        display(df.filter(df(\"userId\") ===user).orderBy(desc(\"rating\")))\r\n",
					"    }\r\n",
					"    else {\r\n",
					"        stars.foreach(starsNum => { \r\n",
					"            println(s\"All movies rated by user $user with $starsNum stars:\")\r\n",
					"            display(df.filter(df(\"userId\") === user).filter(df(\"rating\") === starsNum).orderBy(asc(\"movieId\")))})\r\n",
					"    }\r\n",
					"}\r\n",
					"\r\n",
					"val movies = sql(\"select * from metadata\")\r\n",
					"val df_full = ratings.join(movies, $\"ratings.movieId\" === $\"metadata.id\").drop($\"ratings.movieId\")\r\n",
					"val uid = 1\r\n",
					"\r\n",
					"for(uid <- 1 to 100) {\r\n",
					"    movie_query(df_full, Seq(3.0, 4.5), uid)\r\n",
					"}"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT * from ratings limit 10"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT movieId, avg(rating) "
				],
				"execution_count": null
			}
		]
	}
}